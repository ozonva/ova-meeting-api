// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ova-meeting-api/api.proto

package ova_meeting_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on AddMeetingRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMeetingRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserid() <= 0 {
		return AddMeetingRequestV1ValidationError{
			field:  "Userid",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Title

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMeetingRequestV1ValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMeetingRequestV1ValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMeetingRequestV1ValidationError is the validation error returned by
// AddMeetingRequestV1.Validate if the designated constraints aren't met.
type AddMeetingRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMeetingRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMeetingRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMeetingRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMeetingRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMeetingRequestV1ValidationError) ErrorName() string {
	return "AddMeetingRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e AddMeetingRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMeetingRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMeetingRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMeetingRequestV1ValidationError{}

// Validate checks the field values on MultiCreateMeetingRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateMeetingRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetMeetings()) < 1 {
		return MultiCreateMeetingRequestV1ValidationError{
			field:  "Meetings",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetMeetings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateMeetingRequestV1ValidationError{
					field:  fmt.Sprintf("Meetings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateMeetingRequestV1ValidationError is the validation error returned
// by MultiCreateMeetingRequestV1.Validate if the designated constraints
// aren't met.
type MultiCreateMeetingRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateMeetingRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateMeetingRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateMeetingRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateMeetingRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateMeetingRequestV1ValidationError) ErrorName() string {
	return "MultiCreateMeetingRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateMeetingRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateMeetingRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateMeetingRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateMeetingRequestV1ValidationError{}

// Validate checks the field values on UpdateMeetingRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMeetingRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if m.GetUserid() <= 0 {
		return UpdateMeetingRequestV1ValidationError{
			field:  "Userid",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Title

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestV1ValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingRequestV1ValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMeetingRequestV1ValidationError is the validation error returned by
// UpdateMeetingRequestV1.Validate if the designated constraints aren't met.
type UpdateMeetingRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeetingRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeetingRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeetingRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeetingRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeetingRequestV1ValidationError) ErrorName() string {
	return "UpdateMeetingRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMeetingRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeetingRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeetingRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeetingRequestV1ValidationError{}

// Validate checks the field values on ListMeetingsRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMeetingsRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() <= 0 {
		return ListMeetingsRequestV1ValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Offset

	return nil
}

// ListMeetingsRequestV1ValidationError is the validation error returned by
// ListMeetingsRequestV1.Validate if the designated constraints aren't met.
type ListMeetingsRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMeetingsRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMeetingsRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMeetingsRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMeetingsRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMeetingsRequestV1ValidationError) ErrorName() string {
	return "ListMeetingsRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListMeetingsRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMeetingsRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMeetingsRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMeetingsRequestV1ValidationError{}

// Validate checks the field values on MeetingIDRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MeetingIDRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// MeetingIDRequestV1ValidationError is the validation error returned by
// MeetingIDRequestV1.Validate if the designated constraints aren't met.
type MeetingIDRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingIDRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingIDRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingIDRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingIDRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingIDRequestV1ValidationError) ErrorName() string {
	return "MeetingIDRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MeetingIDRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingIDRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingIDRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingIDRequestV1ValidationError{}

// Validate checks the field values on MeetingStateV1 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MeetingStateV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// MeetingStateV1ValidationError is the validation error returned by
// MeetingStateV1.Validate if the designated constraints aren't met.
type MeetingStateV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingStateV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingStateV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingStateV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingStateV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingStateV1ValidationError) ErrorName() string { return "MeetingStateV1ValidationError" }

// Error satisfies the builtin error interface
func (e MeetingStateV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingStateV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingStateV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingStateV1ValidationError{}

// Validate checks the field values on ListMeetingsResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMeetingsResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMeetingsResponseV1ValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMeetingsResponseV1ValidationError is the validation error returned by
// ListMeetingsResponseV1.Validate if the designated constraints aren't met.
type ListMeetingsResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMeetingsResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMeetingsResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMeetingsResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMeetingsResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMeetingsResponseV1ValidationError) ErrorName() string {
	return "ListMeetingsResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListMeetingsResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMeetingsResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMeetingsResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMeetingsResponseV1ValidationError{}

// Validate checks the field values on MeetingResponseV1 with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MeetingResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingResponseV1ValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Userid

	// no validation rules for Title

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingResponseV1ValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingResponseV1ValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MeetingResponseV1ValidationError is the validation error returned by
// MeetingResponseV1.Validate if the designated constraints aren't met.
type MeetingResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingResponseV1ValidationError) ErrorName() string {
	return "MeetingResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MeetingResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeetingResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingResponseV1ValidationError{}

// Validate checks the field values on UUID with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *UUID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// UUIDValidationError is the validation error returned by UUID.Validate if the
// designated constraints aren't met.
type UUIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UUIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UUIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UUIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UUIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UUIDValidationError) ErrorName() string { return "UUIDValidationError" }

// Error satisfies the builtin error interface
func (e UUIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUUID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UUIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UUIDValidationError{}
